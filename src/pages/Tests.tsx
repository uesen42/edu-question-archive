import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { 
  Plus, 
  Search, 
  Filter, 
  FileText, 
  Calendar, 
  Clock,
  Users,
  TrendingUp,
  MoreVertical,
  Edit2,
  Trash2,
  Download,
  Eye,
  Copy
} from 'lucide-react';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { TestCreateDialog } from '@/components/TestCreateDialog';
import { TestEditDialog } from '@/components/TestEditDialog';
import { TestViewDialog } from '@/components/TestViewDialog';
import { EmptyTestsState } from '@/components/EmptyTestsState';
import { useQuestionStore } from '@/store/questionStore';
import { Test } from '@/types';
import { exportTestToPDF } from '@/utils/pdfExport';
import { TestSimulationDialog } from '@/components/TestSimulationDialog';
import { useAuth } from '@/hooks/useAuth';
import { LogService } from '@/services/logService';

export default function Tests() {
  const { userProfile } = useAuth();
  const [isTestCreateOpen, setIsTestCreateOpen] = useState(false);
  const [isTestEditOpen, setIsTestEditOpen] = useState(false);
  const [isTestViewOpen, setIsTestViewOpen] = useState(false);
  const [isTestSimOpen, setIsTestSimOpen] = useState(false);
  const [selectedTest, setSelectedTest] = useState<Test | null>(null);
  const [deleteTest, setDeleteTest] = useState<Test | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [sortBy, setSortBy] = useState<'name' | 'questions' | 'date'>('date');
  const [filterBy, setFilterBy] = useState<'all' | 'small' | 'medium' | 'large'>('all');
  
  const { 
    tests, 
    questions, 
    categories, 
    loadTests, 
    loadQuestions, 
    loadCategories,
    addTest,
    updateTest,
    deleteTest: removeTestFromStore
  } = useQuestionStore();

  useEffect(() => {
    loadTests();
    loadQuestions();
    loadCategories();
  }, [loadTests, loadQuestions, loadCategories]);

  const handleCreateTest = async (testData: any, userId?: string, userName?: string) => {
    await addTest(testData, userId, userName);
    
    // Log kaydı
    if (userProfile) {
      await LogService.logTestCreate(userProfile.uid, userProfile.displayName, testData.title);
    }
  };

  const handleEditTest = (test: Test) => {
    setSelectedTest(test);
    setIsTestEditOpen(true);
  };

  const handleUpdateTest = async (testData: any, userId?: string, userName?: string) => {
    if (selectedTest) {
      await updateTest({ ...selectedTest, ...testData });
      setSelectedTest(null);
      
      // Log kaydı
      if (userProfile) {
        await LogService.logActivity(
          userProfile.uid, 
          userProfile.displayName, 
          'Test Güncellendi', 
          { testTitle: testData.title }, 
          'test'
        );
      }
    }
  };

  const handleViewTest = (test: Test) => {
    setSelectedTest(test);
    setIsTestViewOpen(true);
  };

  const handleSimulateTest = (test: Test) => {
    setSelectedTest(test);
    setIsTestSimOpen(true);
  };

  const handleDeleteTest = (test: Test) => {
    setDeleteTest(test);
  };

  const confirmDeleteTest = async () => {
    if (deleteTest) {
      await removeTestFromStore(deleteTest.id);
      
      // Log kaydı
      if (userProfile) {
        await LogService.logActivity(
          userProfile.uid, 
          userProfile.displayName, 
          'Test Silindi', 
          { testTitle: deleteTest.title }, 
          'test'
        );
      }
      
      setDeleteTest(null);
    }
  };

  const handleDownloadTest = async (test: Test) => {
    exportTestToPDF(test, questions, categories);
    
    // Log kaydı
    if (userProfile) {
      await LogService.logExport(
        userProfile.uid, 
        userProfile.displayName, 
        'Test PDF', 
        1
      );
    }
  };

  const handleDuplicateTest = async (test: Test) => {
    const duplicatedTest = {
      ...test,
      title: `${test.title} (Kopya)`,
      id: undefined // Will be generated by the store
    };
    await addTest(duplicatedTest, userProfile?.uid, userProfile?.displayName);
    
    // Log kaydı
    if (userProfile) {
      await LogService.logActivity(
        userProfile.uid, 
        userProfile.displayName, 
        'Test Kopyalandı', 
        { originalTitle: test.title, newTitle: duplicatedTest.title }, 
        'test'
      );
    }
  };

  const getTestSize = (questionCount: number) => {
    if (questionCount <= 10) return 'small';
    if (questionCount <= 25) return 'medium';
    return 'large';
  };

  const filteredAndSortedTests = tests
    .filter(test => {
      const matchesSearch = test.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           test.description.toLowerCase().includes(searchTerm.toLowerCase());
      
      if (!matchesSearch) return false;
      
      if (filterBy === 'all') return true;
      
      const size = getTestSize(test.questionIds.length);
      return size === filterBy;
    })
    .sort((a, b) => {
      switch (sortBy) {
        case 'questions':
          return b.questionIds.length - a.questionIds.length;
        case 'name':
          return a.title.localeCompare(b.title);
        default:
          return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();
      }
    });

  const totalTests = tests.length;
  const totalQuestions = tests.reduce((sum, test) => sum + test.questionIds.length, 0);
  const averageQuestionsPerTest = totalTests > 0 ? Math.round(totalQuestions / totalTests) : 0;
  
  const testsBySize = {
    small: tests.filter(t => getTestSize(t.questionIds.length) === 'small').length,
    medium: tests.filter(t => getTestSize(t.questionIds.length) === 'medium').length,
    large: tests.filter(t => getTestSize(t.questionIds.length) === 'large').length,
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Testler</h1>
          <p className="text-gray-600 mt-2">Test oluşturun, düzenleyin ve yönetin</p>
        </div>
        <Button 
          className="flex items-center gap-2"
          onClick={() => setIsTestCreateOpen(true)}
        >
          <Plus className="h-4 w-4" />
          Yeni Test Oluştur
        </Button>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Toplam Test</CardTitle>
            <FileText className="h-4 w-4 text-blue-500" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{totalTests}</div>
            <p className="text-xs text-muted-foreground">
              Oluşturulan testler
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Test Soruları</CardTitle>
            <Users className="h-4 w-4 text-green-500" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{totalQuestions}</div>
            <p className="text-xs text-muted-foreground">
              Toplam soru sayısı
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Ortalama</CardTitle>
            <TrendingUp className="h-4 w-4 text-orange-500" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{averageQuestionsPerTest}</div>
            <p className="text-xs text-muted-foreground">
              Soru/test
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Büyük Testler</CardTitle>
            <Clock className="h-4 w-4 text-purple-500" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{testsBySize.large}</div>
            <p className="text-xs text-muted-foreground">
              25+ soru içeren
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Search and Filter */}
      <div className="flex flex-col sm:flex-row gap-4">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
          <Input
            placeholder="Testlerde ara..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-9"
          />
        </div>
        
        <div className="flex gap-2">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" className="flex items-center gap-2">
                <Filter className="h-4 w-4" />
                {filterBy === 'all' ? 'Tümü' : 
                 filterBy === 'small' ? 'Küçük (≤10)' :
                 filterBy === 'medium' ? 'Orta (11-25)' : 'Büyük (25+)'}
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent>
              <DropdownMenuItem onClick={() => setFilterBy('all')}>
                Tüm Testler
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => setFilterBy('small')}>
                Küçük Testler (≤10 soru)
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => setFilterBy('medium')}>
                Orta Testler (11-25 soru)
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => setFilterBy('large')}>
                Büyük Testler (25+ soru)
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>

          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" className="flex items-center gap-2">
                Sırala: {sortBy === 'name' ? 'İsim' : sortBy === 'questions' ? 'Soru Sayısı' : 'Tarih'}
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent>
              <DropdownMenuItem onClick={() => setSortBy('date')}>
                Tarihe Göre
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => setSortBy('name')}>
                İsme Göre
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => setSortBy('questions')}>
                Soru Sayısına Göre
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>

      {/* Tests Grid */}
      {filteredAndSortedTests.length === 0 ? (
        searchTerm ? (
          <div className="text-center py-12">
            <Search className="mx-auto h-12 w-12 text-gray-400" />
            <h3 className="mt-4 text-lg font-medium text-gray-900">
              Arama sonucu bulunamadı
            </h3>
            <p className="mt-2 text-gray-600">
              "{searchTerm}" için test bulunamadı.
            </p>
          </div>
        ) : (
          <EmptyTestsState onCreateTest={() => setIsTestCreateOpen(true)} />
        )
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredAndSortedTests.map((test) => {
            const testSize = getTestSize(test.questionIds.length);
            const sizeColor = testSize === 'small' ? 'bg-green-100 text-green-800' :
                             testSize === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                             'bg-red-100 text-red-800';
            
            return (
              <Card key={test.id} className="hover:shadow-lg transition-all duration-200 group">
                <CardHeader className="pb-3">
                  <div className="flex items-start justify-between">
                    <div className="flex-1 min-w-0">
                      <CardTitle className="text-lg truncate">{test.title}</CardTitle>
                      <div className="flex items-center gap-2 mt-2">
                        <Badge variant="secondary">
                          {test.questionIds.length} soru
                        </Badge>
                        <Badge className={sizeColor}>
                          {testSize === 'small' ? 'Küçük' :
                           testSize === 'medium' ? 'Orta' : 'Büyük'}
                        </Badge>
                      </div>
                    </div>
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button 
                          variant="ghost" 
                          size="sm"
                          className="opacity-0 group-hover:opacity-100 transition-opacity"
                        >
                          <MoreVertical className="h-4 w-4" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent>
                        <DropdownMenuItem onClick={() => handleViewTest(test)}>
                          <Eye className="h-4 w-4 mr-2" />
                          Görüntüle
                        </DropdownMenuItem>
                        <DropdownMenuItem onClick={() => handleEditTest(test)}>
                          <Edit2 className="h-4 w-4 mr-2" />
                          Düzenle
                        </DropdownMenuItem>
                        <DropdownMenuItem onClick={() => handleSimulateTest(test)}>
                          <Clock className="h-4 w-4 mr-2" />
                          Testi Çöz
                        </DropdownMenuItem>
                        <DropdownMenuItem onClick={() => handleDuplicateTest(test)}>
                          <Copy className="h-4 w-4 mr-2" />
                          Kopyala
                        </DropdownMenuItem>
                        <DropdownMenuItem onClick={() => handleDownloadTest(test)}>
                          <Download className="h-4 w-4 mr-2" />
                          PDF İndir
                        </DropdownMenuItem>
                        <DropdownMenuItem 
                          onClick={() => handleDeleteTest(test)}
                          className="text-red-600"
                        >
                          <Trash2 className="h-4 w-4 mr-2" />
                          Sil
                        </DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </div>
                </CardHeader>
                <CardContent>
                  <p className="text-gray-600 text-sm mb-4 line-clamp-2">
                    {test.description || 'Açıklama yok'}
                  </p>
                  
                  {/* Test Settings */}
                  <div className="flex flex-wrap gap-1 mb-4">
                    {test.settings.showAnswers && (
                      <Badge variant="outline" className="text-xs">
                        Cevaplar
                      </Badge>
                    )}
                    {test.settings.randomizeOrder && (
                      <Badge variant="outline" className="text-xs">
                        Karışık
                      </Badge>
                    )}
                    {test.settings.showOptions && (
                      <Badge variant="outline" className="text-xs">
                        Şıklı
                      </Badge>
                    )}
                    {test.settings.timeLimit && (
                      <Badge variant="outline" className="text-xs">
                        {test.settings.timeLimit}dk
                      </Badge>
                    )}
                  </div>

                  {/* Action Buttons */}
                  <div className="flex items-center justify-between">
                    <div className="text-xs text-gray-500 flex items-center gap-1">
                      <Calendar className="h-3 w-3" />
                      {new Date(test.createdAt).toLocaleDateString('tr-TR')}
                    </div>
                    <div className="flex gap-1">
                      <Button 
                        variant="outline" 
                        size="sm"
                        onClick={() => handleViewTest(test)}
                      >
                        <Eye className="h-3 w-3" />
                      </Button>
                      <Button 
                        variant="outline" 
                        size="sm"
                        onClick={() => handleDownloadTest(test)}
                      >
                        <Download className="h-3 w-3" />
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            );
          })}
        </div>
      )}

      {/* Dialogs */}
      <TestCreateDialog
        open={isTestCreateOpen}
        onOpenChange={setIsTestCreateOpen}
        onSave={handleCreateTest}
        questions={questions}
        categories={categories}
      />

      <TestEditDialog
        open={isTestEditOpen}
        onOpenChange={setIsTestEditOpen}
        test={selectedTest}
        onSave={handleUpdateTest}
        questions={questions}
        categories={categories}
      />

      <TestViewDialog
        test={selectedTest}
        questions={questions}
        categories={categories}
        open={isTestViewOpen}
        onOpenChange={setIsTestViewOpen}
      />

      <AlertDialog open={!!deleteTest} onOpenChange={() => setDeleteTest(null)}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Testi sil</AlertDialogTitle>
            <AlertDialogDescription>
              "{deleteTest?.title}" testini silmek istediğinizden emin misiniz? 
              Bu işlem geri alınamaz.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>İptal</AlertDialogCancel>
            <AlertDialogAction onClick={confirmDeleteTest} className="bg-red-600 hover:bg-red-700">
              Sil
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Test Simülasyon/Önizleme Dialog */}
      <TestSimulationDialog
        open={isTestSimOpen}
        onOpenChange={setIsTestSimOpen}
        test={selectedTest}
        questions={questions}
        categories={categories}
      />
    </div>
  );
}
